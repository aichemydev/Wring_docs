"use strict";(self.webpackChunktest_gold=self.webpackChunktest_gold||[]).push([[333],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=i,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},615:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:1},s="Merge Tests Flows",o={unversionedId:"APPS/Merge Tests/merge",id:"APPS/Merge Tests/merge",isDocsHomePage:!1,title:"Merge Tests Flows",description:"The Merging Tests API streamlines the process of integrating updates from an original script into a new script structure. This ensures that all relevant modifications are accurately reflected while maintaining compatibility with the required format.",source:"@site/docs/APPS/Merge Tests/merge.md",sourceDirName:"APPS/Merge Tests",slug:"/APPS/Merge Tests/merge",permalink:"/Wring_docs/docs/APPS/Merge Tests/merge",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"REST API Test Structure",permalink:"/Wring_docs/docs/APPS/API/apiw"},next:{title:"Wringr Cucumber Testing",permalink:"/Wring_docs/docs/Test Frameworks/Cucumber/cucumber"}},l=[],c={toc:l};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"merge-tests-flows"},"Merge Tests Flows"),(0,i.kt)("p",null,"The Merging Tests API streamlines the process of integrating updates from an original script into a new script structure. This ensures that all relevant modifications are accurately reflected while maintaining compatibility with the required format."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Inputs:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Original Script File: The base test script serving as the starting point."),(0,i.kt)("li",{parentName:"ul"},"Modified Script File: An updated version of the original script containing changes or improvements."),(0,i.kt)("li",{parentName:"ul"},"New Test JSON: JSON data representing a new test script, into which applicable changes from the original and modified scripts will be incorporated.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Merged Script: A fully integrated test script, generated based on the provided JSON data, with relevant updates from the modified script seamlessly applied.")),(0,i.kt)("p",null,"This API ensures that test scripts remain consistent, up-to-date, and aligned with the latest modifications, all while preserving compatibility and structure."))}p.isMDXComponent=!0}}]);